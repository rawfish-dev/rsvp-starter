// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../interfaces/storage.go

package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/rawfish-dev/rsvp-starter/server/domain"
)

// Mock of CategoryStorage interface
type MockCategoryStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockCategoryStorageRecorder
}

// Recorder for MockCategoryStorage (not exported)
type _MockCategoryStorageRecorder struct {
	mock *MockCategoryStorage
}

func NewMockCategoryStorage(ctrl *gomock.Controller) *MockCategoryStorage {
	mock := &MockCategoryStorage{ctrl: ctrl}
	mock.recorder = &_MockCategoryStorageRecorder{mock}
	return mock
}

func (_m *MockCategoryStorage) EXPECT() *_MockCategoryStorageRecorder {
	return _m.recorder
}

func (_m *MockCategoryStorage) InsertCategory(_param0 *domain.CategoryCreateRequest) (*domain.Category, error) {
	ret := _m.ctrl.Call(_m, "InsertCategory", _param0)
	ret0, _ := ret[0].(*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStorageRecorder) InsertCategory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InsertCategory", arg0)
}

func (_m *MockCategoryStorage) FindCategoryByID(categoryID int64) (*domain.Category, error) {
	ret := _m.ctrl.Call(_m, "FindCategoryByID", categoryID)
	ret0, _ := ret[0].(*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStorageRecorder) FindCategoryByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindCategoryByID", arg0)
}

func (_m *MockCategoryStorage) ListCategories() ([]domain.Category, error) {
	ret := _m.ctrl.Call(_m, "ListCategories")
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStorageRecorder) ListCategories() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCategories")
}

func (_m *MockCategoryStorage) UpdateCategory(_param0 *domain.Category) (*domain.Category, error) {
	ret := _m.ctrl.Call(_m, "UpdateCategory", _param0)
	ret0, _ := ret[0].(*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryStorageRecorder) UpdateCategory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCategory", arg0)
}

func (_m *MockCategoryStorage) DeleteCategory(_param0 *domain.Category) error {
	ret := _m.ctrl.Call(_m, "DeleteCategory", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCategoryStorageRecorder) DeleteCategory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCategory", arg0)
}

// Mock of InvitationStorage interface
type MockInvitationStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockInvitationStorageRecorder
}

// Recorder for MockInvitationStorage (not exported)
type _MockInvitationStorageRecorder struct {
	mock *MockInvitationStorage
}

func NewMockInvitationStorage(ctrl *gomock.Controller) *MockInvitationStorage {
	mock := &MockInvitationStorage{ctrl: ctrl}
	mock.recorder = &_MockInvitationStorageRecorder{mock}
	return mock
}

func (_m *MockInvitationStorage) EXPECT() *_MockInvitationStorageRecorder {
	return _m.recorder
}

func (_m *MockInvitationStorage) InsertInvitation(_param0 *domain.InvitationCreateRequest) (*domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "InsertInvitation", _param0)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationStorageRecorder) InsertInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InsertInvitation", arg0)
}

func (_m *MockInvitationStorage) FindInvitationByID(invitationID int64) (*domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "FindInvitationByID", invitationID)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationStorageRecorder) FindInvitationByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindInvitationByID", arg0)
}

func (_m *MockInvitationStorage) FindInvitationByPrivateID(privateID string) (*domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "FindInvitationByPrivateID", privateID)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationStorageRecorder) FindInvitationByPrivateID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindInvitationByPrivateID", arg0)
}

func (_m *MockInvitationStorage) ListInvitations() ([]domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "ListInvitations")
	ret0, _ := ret[0].([]domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationStorageRecorder) ListInvitations() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInvitations")
}

func (_m *MockInvitationStorage) UpdateInvitation(_param0 *domain.Invitation) (*domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "UpdateInvitation", _param0)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationStorageRecorder) UpdateInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateInvitation", arg0)
}

func (_m *MockInvitationStorage) DeleteInvitation(_param0 *domain.Invitation) error {
	ret := _m.ctrl.Call(_m, "DeleteInvitation", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInvitationStorageRecorder) DeleteInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInvitation", arg0)
}

// Mock of RSVPStorage interface
type MockRSVPStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockRSVPStorageRecorder
}

// Recorder for MockRSVPStorage (not exported)
type _MockRSVPStorageRecorder struct {
	mock *MockRSVPStorage
}

func NewMockRSVPStorage(ctrl *gomock.Controller) *MockRSVPStorage {
	mock := &MockRSVPStorage{ctrl: ctrl}
	mock.recorder = &_MockRSVPStorageRecorder{mock}
	return mock
}

func (_m *MockRSVPStorage) EXPECT() *_MockRSVPStorageRecorder {
	return _m.recorder
}

func (_m *MockRSVPStorage) InsertRSVP(_param0 *domain.RSVPCreateRequest) (*domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "InsertRSVP", _param0)
	ret0, _ := ret[0].(*domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPStorageRecorder) InsertRSVP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InsertRSVP", arg0)
}

func (_m *MockRSVPStorage) FindRSVPByID(rsvpID int64) (*domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "FindRSVPByID", rsvpID)
	ret0, _ := ret[0].(*domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPStorageRecorder) FindRSVPByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindRSVPByID", arg0)
}

func (_m *MockRSVPStorage) FindRSVPByInvitationPrivateID(invitationPrivateID string) (*domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "FindRSVPByInvitationPrivateID", invitationPrivateID)
	ret0, _ := ret[0].(*domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPStorageRecorder) FindRSVPByInvitationPrivateID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindRSVPByInvitationPrivateID", arg0)
}

func (_m *MockRSVPStorage) ListRSVPs() ([]domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "ListRSVPs")
	ret0, _ := ret[0].([]domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPStorageRecorder) ListRSVPs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRSVPs")
}

func (_m *MockRSVPStorage) UpdateRSVP(_param0 *domain.RSVP) (*domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "UpdateRSVP", _param0)
	ret0, _ := ret[0].(*domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPStorageRecorder) UpdateRSVP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateRSVP", arg0)
}

func (_m *MockRSVPStorage) DeleteRSVP(_param0 *domain.RSVP) error {
	ret := _m.ctrl.Call(_m, "DeleteRSVP", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRSVPStorageRecorder) DeleteRSVP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRSVP", arg0)
}
