// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../interfaces/services.go

package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/rawfish-dev/rsvp-starter/server/domain"
	time "time"
)

// Mock of SessionServiceProvider interface
type MockSessionServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionServiceProviderRecorder
}

// Recorder for MockSessionServiceProvider (not exported)
type _MockSessionServiceProviderRecorder struct {
	mock *MockSessionServiceProvider
}

func NewMockSessionServiceProvider(ctrl *gomock.Controller) *MockSessionServiceProvider {
	mock := &MockSessionServiceProvider{ctrl: ctrl}
	mock.recorder = &_MockSessionServiceProviderRecorder{mock}
	return mock
}

func (_m *MockSessionServiceProvider) EXPECT() *_MockSessionServiceProviderRecorder {
	return _m.recorder
}

func (_m *MockSessionServiceProvider) CreateWithExpiry(username string) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateWithExpiry", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionServiceProviderRecorder) CreateWithExpiry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateWithExpiry", arg0)
}

func (_m *MockSessionServiceProvider) IsSessionValid(authToken string) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsSessionValid", authToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionServiceProviderRecorder) IsSessionValid(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSessionValid", arg0)
}

func (_m *MockSessionServiceProvider) Destroy(authToken string) error {
	ret := _m.ctrl.Call(_m, "Destroy", authToken)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSessionServiceProviderRecorder) Destroy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy", arg0)
}

// Mock of JWTServiceProvider interface
type MockJWTServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockJWTServiceProviderRecorder
}

// Recorder for MockJWTServiceProvider (not exported)
type _MockJWTServiceProviderRecorder struct {
	mock *MockJWTServiceProvider
}

func NewMockJWTServiceProvider(ctrl *gomock.Controller) *MockJWTServiceProvider {
	mock := &MockJWTServiceProvider{ctrl: ctrl}
	mock.recorder = &_MockJWTServiceProviderRecorder{mock}
	return mock
}

func (_m *MockJWTServiceProvider) EXPECT() *_MockJWTServiceProviderRecorder {
	return _m.recorder
}

func (_m *MockJWTServiceProvider) GenerateAuthToken(additionalClaims map[string]string, duration time.Duration) (string, error) {
	ret := _m.ctrl.Call(_m, "GenerateAuthToken", additionalClaims, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJWTServiceProviderRecorder) GenerateAuthToken(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenerateAuthToken", arg0, arg1)
}

func (_m *MockJWTServiceProvider) ParseToken(token string) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "ParseToken", token)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockJWTServiceProviderRecorder) ParseToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ParseToken", arg0)
}

func (_m *MockJWTServiceProvider) IsAuthTokenValid(authToken string) bool {
	ret := _m.ctrl.Call(_m, "IsAuthTokenValid", authToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockJWTServiceProviderRecorder) IsAuthTokenValid(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAuthTokenValid", arg0)
}

// Mock of SecurityServiceProvider interface
type MockSecurityServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockSecurityServiceProviderRecorder
}

// Recorder for MockSecurityServiceProvider (not exported)
type _MockSecurityServiceProviderRecorder struct {
	mock *MockSecurityServiceProvider
}

func NewMockSecurityServiceProvider(ctrl *gomock.Controller) *MockSecurityServiceProvider {
	mock := &MockSecurityServiceProvider{ctrl: ctrl}
	mock.recorder = &_MockSecurityServiceProviderRecorder{mock}
	return mock
}

func (_m *MockSecurityServiceProvider) EXPECT() *_MockSecurityServiceProviderRecorder {
	return _m.recorder
}

func (_m *MockSecurityServiceProvider) ValidateCredentials(username string, password string) bool {
	ret := _m.ctrl.Call(_m, "ValidateCredentials", username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSecurityServiceProviderRecorder) ValidateCredentials(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateCredentials", arg0, arg1)
}

func (_m *MockSecurityServiceProvider) VerifyReCAPTCHA(token string) bool {
	ret := _m.ctrl.Call(_m, "VerifyReCAPTCHA", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSecurityServiceProviderRecorder) VerifyReCAPTCHA(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyReCAPTCHA", arg0)
}

// Mock of CategoryServiceProvider interface
type MockCategoryServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockCategoryServiceProviderRecorder
}

// Recorder for MockCategoryServiceProvider (not exported)
type _MockCategoryServiceProviderRecorder struct {
	mock *MockCategoryServiceProvider
}

func NewMockCategoryServiceProvider(ctrl *gomock.Controller) *MockCategoryServiceProvider {
	mock := &MockCategoryServiceProvider{ctrl: ctrl}
	mock.recorder = &_MockCategoryServiceProviderRecorder{mock}
	return mock
}

func (_m *MockCategoryServiceProvider) EXPECT() *_MockCategoryServiceProviderRecorder {
	return _m.recorder
}

func (_m *MockCategoryServiceProvider) CreateCategory(_param0 *domain.CategoryCreateRequest) (*domain.Category, error) {
	ret := _m.ctrl.Call(_m, "CreateCategory", _param0)
	ret0, _ := ret[0].(*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryServiceProviderRecorder) CreateCategory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCategory", arg0)
}

func (_m *MockCategoryServiceProvider) ListCategories() ([]domain.Category, error) {
	ret := _m.ctrl.Call(_m, "ListCategories")
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryServiceProviderRecorder) ListCategories() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCategories")
}

func (_m *MockCategoryServiceProvider) UpdateCategory(_param0 *domain.CategoryUpdateRequest) (*domain.Category, error) {
	ret := _m.ctrl.Call(_m, "UpdateCategory", _param0)
	ret0, _ := ret[0].(*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCategoryServiceProviderRecorder) UpdateCategory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCategory", arg0)
}

func (_m *MockCategoryServiceProvider) DeleteCategoryByID(categoryID int64) error {
	ret := _m.ctrl.Call(_m, "DeleteCategoryByID", categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCategoryServiceProviderRecorder) DeleteCategoryByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCategoryByID", arg0)
}

// Mock of InvitationServiceProvider interface
type MockInvitationServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockInvitationServiceProviderRecorder
}

// Recorder for MockInvitationServiceProvider (not exported)
type _MockInvitationServiceProviderRecorder struct {
	mock *MockInvitationServiceProvider
}

func NewMockInvitationServiceProvider(ctrl *gomock.Controller) *MockInvitationServiceProvider {
	mock := &MockInvitationServiceProvider{ctrl: ctrl}
	mock.recorder = &_MockInvitationServiceProviderRecorder{mock}
	return mock
}

func (_m *MockInvitationServiceProvider) EXPECT() *_MockInvitationServiceProviderRecorder {
	return _m.recorder
}

func (_m *MockInvitationServiceProvider) CreateInvitation(_param0 *domain.InvitationCreateRequest) (*domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "CreateInvitation", _param0)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationServiceProviderRecorder) CreateInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInvitation", arg0)
}

func (_m *MockInvitationServiceProvider) ListInvitations(_param0 []domain.RSVP) ([]domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "ListInvitations", _param0)
	ret0, _ := ret[0].([]domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationServiceProviderRecorder) ListInvitations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInvitations", arg0)
}

func (_m *MockInvitationServiceProvider) UpdateInvitation(_param0 *domain.InvitationUpdateRequest) (*domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "UpdateInvitation", _param0)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationServiceProviderRecorder) UpdateInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateInvitation", arg0)
}

func (_m *MockInvitationServiceProvider) DeleteInvitationByID(invitationID int64) error {
	ret := _m.ctrl.Call(_m, "DeleteInvitationByID", invitationID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInvitationServiceProviderRecorder) DeleteInvitationByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInvitationByID", arg0)
}

func (_m *MockInvitationServiceProvider) RetrieveInvitationByPrivateID(privateID string) (*domain.Invitation, error) {
	ret := _m.ctrl.Call(_m, "RetrieveInvitationByPrivateID", privateID)
	ret0, _ := ret[0].(*domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInvitationServiceProviderRecorder) RetrieveInvitationByPrivateID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetrieveInvitationByPrivateID", arg0)
}

// Mock of RSVPServiceProvider interface
type MockRSVPServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockRSVPServiceProviderRecorder
}

// Recorder for MockRSVPServiceProvider (not exported)
type _MockRSVPServiceProviderRecorder struct {
	mock *MockRSVPServiceProvider
}

func NewMockRSVPServiceProvider(ctrl *gomock.Controller) *MockRSVPServiceProvider {
	mock := &MockRSVPServiceProvider{ctrl: ctrl}
	mock.recorder = &_MockRSVPServiceProviderRecorder{mock}
	return mock
}

func (_m *MockRSVPServiceProvider) EXPECT() *_MockRSVPServiceProviderRecorder {
	return _m.recorder
}

func (_m *MockRSVPServiceProvider) CreateRSVP(_param0 *domain.RSVPCreateRequest) (*domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "CreateRSVP", _param0)
	ret0, _ := ret[0].(*domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPServiceProviderRecorder) CreateRSVP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRSVP", arg0)
}

func (_m *MockRSVPServiceProvider) ListRSVPs() ([]domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "ListRSVPs")
	ret0, _ := ret[0].([]domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPServiceProviderRecorder) ListRSVPs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRSVPs")
}

func (_m *MockRSVPServiceProvider) UpdateRSVP(_param0 *domain.RSVPUpdateRequest) (*domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "UpdateRSVP", _param0)
	ret0, _ := ret[0].(*domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPServiceProviderRecorder) UpdateRSVP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateRSVP", arg0)
}

func (_m *MockRSVPServiceProvider) DeleteRSVPByID(rsvpID int64) error {
	ret := _m.ctrl.Call(_m, "DeleteRSVPByID", rsvpID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRSVPServiceProviderRecorder) DeleteRSVPByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRSVPByID", arg0)
}

func (_m *MockRSVPServiceProvider) RetrievePrivateRSVP(invitationPrivateID string) (*domain.RSVP, error) {
	ret := _m.ctrl.Call(_m, "RetrievePrivateRSVP", invitationPrivateID)
	ret0, _ := ret[0].(*domain.RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRSVPServiceProviderRecorder) RetrievePrivateRSVP(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetrievePrivateRSVP", arg0)
}
